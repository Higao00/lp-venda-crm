import * as S from './styles';
import { motion } from 'framer-motion';
import { useEffect } from 'react';
import { useHeroTest } from '@/hooks/useABTest';
import OptimizedImage from '@/components/OptimizedImage';
import { useForm, Controller } from 'react-hook-form';
import { toast } from 'react-toastify';
import InputMask from 'react-input-mask';
import { useLeadForm } from '@/hooks/useLeadForm';

type FormData = {
    name: string;
    phone: string;
    email: string;
    message: string;
};

interface ContactFormProps {
    buttonText: string;
    onSubmit?: () => void;
}

function ContactForm({ buttonText, onSubmit: onFormSubmit }: ContactFormProps): JSX.Element {
    const {
        register,
        handleSubmit,
        control,
        formState: { errors },
        reset,
    } = useForm<FormData>({
        defaultValues: {
            name: '',
            phone: '',
            email: '',
            message: '',
        },
    });

    const { handleSubmit: handleLeadSubmit, isLoading, error: leadError } = useLeadForm();

    const onSubmit = async (data: FormData) => {
        try {
            await handleLeadSubmit({
                name: data.name || '',
                email: data.email || '',
                phone: data.phone || '',
                message: data.message || '',
            });

            const fullMessage =
                `Ol√°, meu nome √© ${data.name || 'N√£o informado'}.\n\n` +
                `Tenho interesse nas solu√ß√µes de CRM de voc√™s.\n\n` +
                `üìû Telefone: ${data.phone || 'N√£o informado'}\n` +
                `üìß Email: ${data.email || 'N√£o informado'}\n` +
                `üìù Mensagem: ${data.message || 'Sem mensagem'}`;

            const url = `https://api.whatsapp.com/send/?phone=5516991027826&text=${encodeURIComponent(fullMessage)}`;
            window.open(url, '_blank', 'noopener,noreferrer');

            toast.success('Obrigado pelo contato!', { autoClose: 3000 });
            onFormSubmit?.();
            reset();
        } catch (error) {
            console.error('Erro ao processar formul√°rio:', error);
            toast.error('Erro ao enviar formul√°rio. Por favor, tente novamente.');
        }
    };

    const animationVariants = {
        hidden: { opacity: 0, y: 20 },
        visible: { opacity: 1, y: 0 },
    };

    return (
        <motion.div
            initial="hidden"
            whileInView="visible"
            viewport={{ once: true, amount: 0.3 }}
            variants={{
                hidden: {},
                visible: { transition: { staggerChildren: 0.2 } },
            }}
        >

            <motion.h2 variants={animationVariants}>Solicite um or√ßamento</motion.h2>

            <motion.form
                onSubmit={handleSubmit(onSubmit)}
                noValidate
                variants={{ hidden: {}, visible: { transition: { staggerChildren: 0.2 } } }}
            >
                <motion.div variants={animationVariants}>
                    <input
                        type="text"
                        placeholder="Seu nome *"
                        {...register('name', { required: 'Nome √© obrigat√≥rio' })}
                    />
                    {errors.name && <span>{errors.name.message}</span>}
                </motion.div>

                <motion.div variants={animationVariants}>
                    <Controller
                        name="phone"
                        control={control}
                        rules={{ required: 'Celular √© obrigat√≥rio' }}
                        render={({ field }) => (
                            <InputMask
                                mask="(99) 99999-9999"
                                value={field.value}
                                onChange={field.onChange}
                                onBlur={field.onBlur}
                            >
                                {(inputProps: any) => (
                                    <input
                                        type="tel"
                                        placeholder="Celular com DDD *"
                                        {...inputProps}
                                    />
                                )}
                            </InputMask>
                        )}
                    />
                    {errors.phone && <span>{errors.phone.message}</span>}
                </motion.div>

                <motion.div variants={animationVariants}>
                    <input
                        type="email"
                        placeholder="Seu e-mail *"
                        {...register('email', {
                            required: 'Email √© obrigat√≥rio',
                            pattern: {
                                value: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                                message: 'Digite um e-mail v√°lido',
                            },
                        })}
                    />
                    {errors.email && <span>{errors.email.message}</span>}
                </motion.div>

                <motion.div variants={animationVariants}>
                    <textarea
                        placeholder="Escreva sua mensagem..."
                        rows={4}
                        {...register('message')}
                    />
                </motion.div>

                <motion.div variants={animationVariants}>
                    <button className="whatsapp-button" type="submit" disabled={isLoading}>
                        {isLoading ? 'Enviando...' : buttonText}
                    </button>
                </motion.div>

                {leadError && (
                    <motion.div variants={animationVariants} className="error-message">
                        {leadError}
                    </motion.div>
                )}
            </motion.form>
        </motion.div>
    );
}

export default function HeroSection(): JSX.Element {
    const [heroVariant, trackHeroEvent] = useHeroTest('hero_main', {
        A: {
            headline: 'Transforme a gest√£o de clientes com um CRM sob medida',
            subheadline:
                'Oferecemos solu√ß√µes de CRM personalizadas para empresas que desejam melhorar o relacionamento com clientes, automatizar processos e aumentar as vendas.',
            buttonText: 'Entrar em contato',
        },
        B: {
            headline: 'Aumente suas vendas com um CRM inteligente e personalizado',
            subheadline:
                'Automatize processos, gerencie leads e tome decis√µes baseadas em dados com nossa solu√ß√£o completa de CRM adaptada ao seu neg√≥cio.',
            buttonText: 'Solicitar demonstra√ß√£o',
        },
    });

    useEffect(() => {
        trackHeroEvent('view');
    }, [trackHeroEvent]);

    return (
        <S.Hero id="hero">
            <div className="bg-image">
                <OptimizedImage
                    src="https://zurke-innovation.s3.us-east-1.amazonaws.com/LPs/crm-vendas/banner-home.webp"
                    alt="CRM Personalizado para sua empresa"
                    fill
                    style={{ objectFit: 'cover' }}
                    priority
                    lowQualitySrc="https://zurke-innovation.s3.us-east-1.amazonaws.com/LPs/crm-vendas/banner-home.webp"
                />
            </div>

            <div className="overlay" />

            <motion.div
                className="content"
                initial={{ opacity: 0, y: 50 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.8 }}
                viewport={{ once: true }}
            >
                <div className="text">
                    <motion.h1
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5 }}
                    >
                        {heroVariant.headline}
                    </motion.h1>

                    <motion.p
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, delay: 0.2 }}
                    >
                        {heroVariant.subheadline}
                    </motion.p>

                    <motion.ul
                        initial={{ opacity: 0, y: 20 }}
                        animate={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.5, delay: 0.4 }}
                    >
                        <li>‚úì Gest√£o centralizada de clientes e leads</li>
                        <li>‚úì Automa√ß√£o de processos de vendas e marketing</li>
                        <li>‚úì Relat√≥rios e insights para decis√µes estrat√©gicas</li>
                    </motion.ul>
                </div>

                <S.FormBox>
                    <ContactForm
                        buttonText={heroVariant.buttonText}
                        onSubmit={() => trackHeroEvent('conversion')}
                    />
                </S.FormBox>
            </motion.div>
        </S.Hero>
    );
}
